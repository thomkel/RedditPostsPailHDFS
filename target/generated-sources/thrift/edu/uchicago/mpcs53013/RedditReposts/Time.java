/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.RedditReposts;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Time implements org.apache.thrift.TBase<Time, Time._Fields>, java.io.Serializable, Cloneable, Comparable<Time> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Time");

  private static final org.apache.thrift.protocol.TField UNIXTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("unixtime", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField RAWTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("rawtime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("localtime", org.apache.thrift.protocol.TType.I16, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimeTupleSchemeFactory());
  }

  public short unixtime; // required
  public String rawtime; // optional
  public short localtime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIXTIME((short)1, "unixtime"),
    RAWTIME((short)2, "rawtime"),
    LOCALTIME((short)3, "localtime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIXTIME
          return UNIXTIME;
        case 2: // RAWTIME
          return RAWTIME;
        case 3: // LOCALTIME
          return LOCALTIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UNIXTIME_ISSET_ID = 0;
  private static final int __LOCALTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RAWTIME,_Fields.LOCALTIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIXTIME, new org.apache.thrift.meta_data.FieldMetaData("unixtime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RAWTIME, new org.apache.thrift.meta_data.FieldMetaData("rawtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALTIME, new org.apache.thrift.meta_data.FieldMetaData("localtime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Time.class, metaDataMap);
  }

  public Time() {
  }

  public Time(
    short unixtime)
  {
    this();
    this.unixtime = unixtime;
    setUnixtimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Time(Time other) {
    __isset_bitfield = other.__isset_bitfield;
    this.unixtime = other.unixtime;
    if (other.isSetRawtime()) {
      this.rawtime = other.rawtime;
    }
    this.localtime = other.localtime;
  }

  public Time deepCopy() {
    return new Time(this);
  }

  @Override
  public void clear() {
    setUnixtimeIsSet(false);
    this.unixtime = 0;
    this.rawtime = null;
    setLocaltimeIsSet(false);
    this.localtime = 0;
  }

  public short getUnixtime() {
    return this.unixtime;
  }

  public Time setUnixtime(short unixtime) {
    this.unixtime = unixtime;
    setUnixtimeIsSet(true);
    return this;
  }

  public void unsetUnixtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIXTIME_ISSET_ID);
  }

  /** Returns true if field unixtime is set (has been assigned a value) and false otherwise */
  public boolean isSetUnixtime() {
    return EncodingUtils.testBit(__isset_bitfield, __UNIXTIME_ISSET_ID);
  }

  public void setUnixtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIXTIME_ISSET_ID, value);
  }

  public String getRawtime() {
    return this.rawtime;
  }

  public Time setRawtime(String rawtime) {
    this.rawtime = rawtime;
    return this;
  }

  public void unsetRawtime() {
    this.rawtime = null;
  }

  /** Returns true if field rawtime is set (has been assigned a value) and false otherwise */
  public boolean isSetRawtime() {
    return this.rawtime != null;
  }

  public void setRawtimeIsSet(boolean value) {
    if (!value) {
      this.rawtime = null;
    }
  }

  public short getLocaltime() {
    return this.localtime;
  }

  public Time setLocaltime(short localtime) {
    this.localtime = localtime;
    setLocaltimeIsSet(true);
    return this;
  }

  public void unsetLocaltime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCALTIME_ISSET_ID);
  }

  /** Returns true if field localtime is set (has been assigned a value) and false otherwise */
  public boolean isSetLocaltime() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCALTIME_ISSET_ID);
  }

  public void setLocaltimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCALTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIXTIME:
      if (value == null) {
        unsetUnixtime();
      } else {
        setUnixtime((Short)value);
      }
      break;

    case RAWTIME:
      if (value == null) {
        unsetRawtime();
      } else {
        setRawtime((String)value);
      }
      break;

    case LOCALTIME:
      if (value == null) {
        unsetLocaltime();
      } else {
        setLocaltime((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIXTIME:
      return Short.valueOf(getUnixtime());

    case RAWTIME:
      return getRawtime();

    case LOCALTIME:
      return Short.valueOf(getLocaltime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIXTIME:
      return isSetUnixtime();
    case RAWTIME:
      return isSetRawtime();
    case LOCALTIME:
      return isSetLocaltime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Time)
      return this.equals((Time)that);
    return false;
  }

  public boolean equals(Time that) {
    if (that == null)
      return false;

    boolean this_present_unixtime = true;
    boolean that_present_unixtime = true;
    if (this_present_unixtime || that_present_unixtime) {
      if (!(this_present_unixtime && that_present_unixtime))
        return false;
      if (this.unixtime != that.unixtime)
        return false;
    }

    boolean this_present_rawtime = true && this.isSetRawtime();
    boolean that_present_rawtime = true && that.isSetRawtime();
    if (this_present_rawtime || that_present_rawtime) {
      if (!(this_present_rawtime && that_present_rawtime))
        return false;
      if (!this.rawtime.equals(that.rawtime))
        return false;
    }

    boolean this_present_localtime = true && this.isSetLocaltime();
    boolean that_present_localtime = true && that.isSetLocaltime();
    if (this_present_localtime || that_present_localtime) {
      if (!(this_present_localtime && that_present_localtime))
        return false;
      if (this.localtime != that.localtime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_unixtime = true;
    builder.append(present_unixtime);
    if (present_unixtime)
      builder.append(unixtime);

    boolean present_rawtime = true && (isSetRawtime());
    builder.append(present_rawtime);
    if (present_rawtime)
      builder.append(rawtime);

    boolean present_localtime = true && (isSetLocaltime());
    builder.append(present_localtime);
    if (present_localtime)
      builder.append(localtime);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Time other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUnixtime()).compareTo(other.isSetUnixtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnixtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unixtime, other.unixtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRawtime()).compareTo(other.isSetRawtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawtime, other.rawtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocaltime()).compareTo(other.isSetLocaltime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocaltime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localtime, other.localtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Time(");
    boolean first = true;

    sb.append("unixtime:");
    sb.append(this.unixtime);
    first = false;
    if (isSetRawtime()) {
      if (!first) sb.append(", ");
      sb.append("rawtime:");
      if (this.rawtime == null) {
        sb.append("null");
      } else {
        sb.append(this.rawtime);
      }
      first = false;
    }
    if (isSetLocaltime()) {
      if (!first) sb.append(", ");
      sb.append("localtime:");
      sb.append(this.localtime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'unixtime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeStandardSchemeFactory implements SchemeFactory {
    public TimeStandardScheme getScheme() {
      return new TimeStandardScheme();
    }
  }

  private static class TimeStandardScheme extends StandardScheme<Time> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Time struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIXTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.unixtime = iprot.readI16();
              struct.setUnixtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAWTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rawtime = iprot.readString();
              struct.setRawtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCALTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.localtime = iprot.readI16();
              struct.setLocaltimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUnixtime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'unixtime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Time struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UNIXTIME_FIELD_DESC);
      oprot.writeI16(struct.unixtime);
      oprot.writeFieldEnd();
      if (struct.rawtime != null) {
        if (struct.isSetRawtime()) {
          oprot.writeFieldBegin(RAWTIME_FIELD_DESC);
          oprot.writeString(struct.rawtime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLocaltime()) {
        oprot.writeFieldBegin(LOCALTIME_FIELD_DESC);
        oprot.writeI16(struct.localtime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeTupleSchemeFactory implements SchemeFactory {
    public TimeTupleScheme getScheme() {
      return new TimeTupleScheme();
    }
  }

  private static class TimeTupleScheme extends TupleScheme<Time> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Time struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.unixtime);
      BitSet optionals = new BitSet();
      if (struct.isSetRawtime()) {
        optionals.set(0);
      }
      if (struct.isSetLocaltime()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRawtime()) {
        oprot.writeString(struct.rawtime);
      }
      if (struct.isSetLocaltime()) {
        oprot.writeI16(struct.localtime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Time struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.unixtime = iprot.readI16();
      struct.setUnixtimeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.rawtime = iprot.readString();
        struct.setRawtimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.localtime = iprot.readI16();
        struct.setLocaltimeIsSet(true);
      }
    }
  }

}

