/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.RedditReposts;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataUnit implements org.apache.thrift.TBase<DataUnit, DataUnit._Fields>, java.io.Serializable, Cloneable, Comparable<DataUnit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataUnit");

  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField POST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("post_info", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataUnitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataUnitTupleSchemeFactory());
  }

  public Score score; // required
  public Time time; // required
  public PostInfo post_info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCORE((short)1, "score"),
    TIME((short)2, "time"),
    POST_INFO((short)3, "post_info");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCORE
          return SCORE;
        case 2: // TIME
          return TIME;
        case 3: // POST_INFO
          return POST_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Score.class)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Time.class)));
    tmpMap.put(_Fields.POST_INFO, new org.apache.thrift.meta_data.FieldMetaData("post_info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PostInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataUnit.class, metaDataMap);
  }

  public DataUnit() {
  }

  public DataUnit(
    Score score,
    Time time,
    PostInfo post_info)
  {
    this();
    this.score = score;
    this.time = time;
    this.post_info = post_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataUnit(DataUnit other) {
    if (other.isSetScore()) {
      this.score = new Score(other.score);
    }
    if (other.isSetTime()) {
      this.time = new Time(other.time);
    }
    if (other.isSetPost_info()) {
      this.post_info = new PostInfo(other.post_info);
    }
  }

  public DataUnit deepCopy() {
    return new DataUnit(this);
  }

  @Override
  public void clear() {
    this.score = null;
    this.time = null;
    this.post_info = null;
  }

  public Score getScore() {
    return this.score;
  }

  public DataUnit setScore(Score score) {
    this.score = score;
    return this;
  }

  public void unsetScore() {
    this.score = null;
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return this.score != null;
  }

  public void setScoreIsSet(boolean value) {
    if (!value) {
      this.score = null;
    }
  }

  public Time getTime() {
    return this.time;
  }

  public DataUnit setTime(Time time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public PostInfo getPost_info() {
    return this.post_info;
  }

  public DataUnit setPost_info(PostInfo post_info) {
    this.post_info = post_info;
    return this;
  }

  public void unsetPost_info() {
    this.post_info = null;
  }

  /** Returns true if field post_info is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_info() {
    return this.post_info != null;
  }

  public void setPost_infoIsSet(boolean value) {
    if (!value) {
      this.post_info = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Score)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Time)value);
      }
      break;

    case POST_INFO:
      if (value == null) {
        unsetPost_info();
      } else {
        setPost_info((PostInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCORE:
      return getScore();

    case TIME:
      return getTime();

    case POST_INFO:
      return getPost_info();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCORE:
      return isSetScore();
    case TIME:
      return isSetTime();
    case POST_INFO:
      return isSetPost_info();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataUnit)
      return this.equals((DataUnit)that);
    return false;
  }

  public boolean equals(DataUnit that) {
    if (that == null)
      return false;

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (!this.score.equals(that.score))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_post_info = true && this.isSetPost_info();
    boolean that_present_post_info = true && that.isSetPost_info();
    if (this_present_post_info || that_present_post_info) {
      if (!(this_present_post_info && that_present_post_info))
        return false;
      if (!this.post_info.equals(that.post_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_score = true && (isSetScore());
    builder.append(present_score);
    if (present_score)
      builder.append(score);

    boolean present_time = true && (isSetTime());
    builder.append(present_time);
    if (present_time)
      builder.append(time);

    boolean present_post_info = true && (isSetPost_info());
    builder.append(present_post_info);
    if (present_post_info)
      builder.append(post_info);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(DataUnit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_info()).compareTo(other.isSetPost_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_info, other.post_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataUnit(");
    boolean first = true;

    sb.append("score:");
    if (this.score == null) {
      sb.append("null");
    } else {
      sb.append(this.score);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("post_info:");
    if (this.post_info == null) {
      sb.append("null");
    } else {
      sb.append(this.post_info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (score == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'score' was not present! Struct: " + toString());
    }
    if (time == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' was not present! Struct: " + toString());
    }
    if (post_info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'post_info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (score != null) {
      score.validate();
    }
    if (time != null) {
      time.validate();
    }
    if (post_info != null) {
      post_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataUnitStandardSchemeFactory implements SchemeFactory {
    public DataUnitStandardScheme getScheme() {
      return new DataUnitStandardScheme();
    }
  }

  private static class DataUnitStandardScheme extends StandardScheme<DataUnit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataUnit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.score = new Score();
              struct.score.read(iprot);
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.time = new Time();
              struct.time.read(iprot);
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POST_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.post_info = new PostInfo();
              struct.post_info.read(iprot);
              struct.setPost_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataUnit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.score != null) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        struct.score.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        struct.time.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.post_info != null) {
        oprot.writeFieldBegin(POST_INFO_FIELD_DESC);
        struct.post_info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataUnitTupleSchemeFactory implements SchemeFactory {
    public DataUnitTupleScheme getScheme() {
      return new DataUnitTupleScheme();
    }
  }

  private static class DataUnitTupleScheme extends TupleScheme<DataUnit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataUnit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.score.write(oprot);
      struct.time.write(oprot);
      struct.post_info.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataUnit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.score = new Score();
      struct.score.read(iprot);
      struct.setScoreIsSet(true);
      struct.time = new Time();
      struct.time.read(iprot);
      struct.setTimeIsSet(true);
      struct.post_info = new PostInfo();
      struct.post_info.read(iprot);
      struct.setPost_infoIsSet(true);
    }
  }

}

